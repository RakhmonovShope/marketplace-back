generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  phone     String    @unique
  email     String
  gender    GENDER
  birthday  String
  name      String?
  password  String
  subType   SUB_TYPE
  active    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  roleId    String
  Comment   Comment[]
  Order     Order[]
  role      Role      @relation(fields: [roleId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  nameUz      String
  nameRu      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions String[]
  active      Boolean  @default(false)
  User        User[]
}

model Category {
  id            String      @id @default(uuid())
  nameUz        String
  nameRu        String
  descriptionUz String
  descriptionRu String
  slugUz        String
  slugRu        String
  position      Int
  parentId      String?
  active        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  attributes    Attribute[]
  Product       Product[]
}

model Attribute {
  id            String            @id @default(uuid())
  nameUz        String
  nameRu        String
  descriptionUz String
  descriptionRu String
  active        Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  categoryId    String?
  Category      Category?         @relation(fields: [categoryId], references: [id])
  options       AttributeOption[]
}

model AttributeOption {
  id          String    @id @default(uuid())
  nameUz      String
  nameRu      String
  active      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attributeId String
  Attribute   Attribute @relation(fields: [attributeId], references: [id])
}

model File {
  id        String   @id @default(uuid())
  name      String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Audio {
  id        String   @id @default(uuid())
  name      String
  extension String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String    @id @default(uuid())
  nameUz        String
  nameRu        String
  descriptionUz String
  descriptionRu String
  price         Float
  discount      Float
  active        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  categoryId    String
  brandId       String
  storeId       String
  orderId       String?
  images        String[]
  Comment       Comment[]
  brand         Brand     @relation(fields: [brandId], references: [id])
  category      Category  @relation(fields: [categoryId], references: [id])
  Order         Order?    @relation(fields: [orderId], references: [id])
  store         Store     @relation(fields: [storeId], references: [id])
}

model Order {
  id        String    @id @default(uuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  products  Product[]
}

model Comment {
  id        String       @id @default(uuid())
  userId    String
  productId String
  text      String
  type      COMMENT_TYPE
  rating    Int
  active    Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Product      @relation(fields: [productId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

model Promocode {
  id          String   @id @default(uuid())
  code        String
  discount    Float
  customerId  String
  productId   String
  categoryIds String[]
  startDate   DateTime
  endDate     DateTime
  active      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Promotion {
  id            String   @id @default(uuid())
  nameUz        String
  nameRu        String
  descriptionUz String
  descriptionRu String
  discount      Float
  startDate     DateTime
  endDate       DateTime
  active        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Badge {
  id         String     @id @default(uuid())
  icon       String
  nameRu     String
  nameUz     String
  background Json
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  active     Boolean    @default(false)
  type       BADGE_TYPE
  textColor  String
}

model Banner {
  id        String   @id @default(uuid())
  nameRu    String
  nameUz    String
  coverRu   String
  coverUz   String
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String    @id @default(uuid())
  nameRu    String
  nameUz    String
  logo      String
  cover     String
  active    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Store {
  id          String    @id @default(uuid())
  name        String
  pagename    String
  description String
  cover       String?
  logo        String?
  address     String
  active      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]
}

model Page {
  id        String   @id @default(uuid())
  nameRu    String
  nameUz    String
  contentRu String
  contentUz String
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GENDER {
  MALE
  FEMALE
}

enum SUB_TYPE {
  ADMIN
  CUSTOMER
}

enum COMMENT_TYPE {
  COMMENT
  REVIEW
}

enum BADGE_TYPE {
  STATIC
  DYNAMIC
}
